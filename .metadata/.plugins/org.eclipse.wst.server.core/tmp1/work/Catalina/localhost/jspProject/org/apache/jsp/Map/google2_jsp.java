/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.39
 * Generated at: 2017-02-24 08:48:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class google2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>Marker Labels</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.12.3.min.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("html, body {\r\n");
      out.write("\theight: 500px;\r\n");
      out.write("\tmargin: 0;\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#map {\r\n");
      out.write("\theight: 500px;\r\n");
      out.write("\twidth: 500px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".controls {\r\n");
      out.write("\tmargin-top: 10px;\r\n");
      out.write("\tborder: 1px solid transparent;\r\n");
      out.write("\tborder-radius: 2px 0 0 2px;\r\n");
      out.write("\tbox-sizing: border-box;\r\n");
      out.write("\t-moz-box-sizing: border-box;\r\n");
      out.write("\theight: 32px;\r\n");
      out.write("\toutline: none;\r\n");
      out.write("\tbox-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\r\n");
      out.write("\tbackground-color: #fff;\r\n");
      out.write("\tfont-family: Roboto;\r\n");
      out.write("\tfont-size: 15px;\r\n");
      out.write("\tfont-weight: 300;\r\n");
      out.write("\tmargin-left: 12px;\r\n");
      out.write("\tpadding: 0 11px 0 13px;\r\n");
      out.write("\ttext-overflow: ellipsis;\r\n");
      out.write("\twidth: 300px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#type-selector label {\r\n");
      out.write("\tfont-family: Roboto;\r\n");
      out.write("\tfont-size: 13px;\r\n");
      out.write("\tfont-weight: 300;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAF05JCFoefu9jROxjM8TcHc8GIR6YDhuU&libraries=places&callback=initialize\"\r\n");
      out.write("\tasync defer></script>\r\n");
      out.write("<script>\r\n");
      out.write("\tf = false; \r\n");
      out.write("\tfunction flag() {\r\n");
      out.write("\t\tf = !f;\r\n");
      out.write("\t}\r\n");
      out.write("\t// 마커 레이블\r\n");
      out.write("\tvar labels = new Array('1', '2', '3', '4', '5', '6', '7', '8', '9', '10',\r\n");
      out.write("\t\t\t'11', '12', '13', '14', '15');\r\n");
      out.write("\tvar labelIndex = 0;\r\n");
      out.write("\tvar map = \"\";\r\n");
      out.write("\r\n");
      out.write("\tfunction initialize() {\r\n");
      out.write("\t\t// 좌표 등록\r\n");
      out.write("\t\tvar seoul = {\r\n");
      out.write("\t\t\tlat : 37.6,\r\n");
      out.write("\t\t\tlng : 127\r\n");
      out.write("\t\t}; \r\n");
      out.write("\t\tmap = new google.maps.Map(document.getElementById('map'), {\r\n");
      out.write("\t\t\tzoom : 13,\r\n");
      out.write("\t\t\tcenter : seoul,\r\n");
      out.write("\t\t\tmapTypeId : google.maps.MapTypeId.ROADMAP\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tgoogle.maps.event.addListener(map, 'click', function(event) {\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (f) {\r\n");
      out.write("\t\t\t\taddMarker(event.latLng, map);\r\n");
      out.write("\t\t\t\tf = !f;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write(" \t\tvar input = document.getElementById('pac-input');\r\n");
      out.write("\t\tvar searchBox = new google.maps.places.SearchBox(input);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\tvar latlng1, latlng2;\r\n");
      out.write("\t// 마커 추가\r\n");
      out.write("\tfunction addMarker(location, map) {\r\n");
      out.write("\t\talert(location);\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\tvar marker = new google.maps.Marker({\r\n");
      out.write("\t\t\tposition : location,\r\n");
      out.write("\t\t\tlabel : labels[labelIndex++],\r\n");
      out.write("\t\t\tmap : map\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tlatlng1 = location;\r\n");
      out.write("\t\tvar flightPlanCoordinates = [ latlng1, latlng2 ];\r\n");
      out.write("\t\tvar flightPath = new google.maps.Polyline({\r\n");
      out.write("\t\t\tpath : flightPlanCoordinates,\r\n");
      out.write("\t\t\tgeodesic : true,\r\n");
      out.write("\t\t\tstrokeColor : '#FF0000',\r\n");
      out.write("\t\t\tstrokeOpacity : 1.0,\r\n");
      out.write("\t\t\tstrokeWeight : 2\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tflightPath.setMap(map);\r\n");
      out.write("\r\n");
      out.write("\t\tlatlng2 = latlng1;\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction geoCode(faddr) {\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t \r\n");
      out.write("\r\n");
      out.write("\t var geocoder;\r\n");
      out.write("\r\n");
      out.write("\t geocoder = new google.maps.Geocoder();\r\n");
      out.write("\r\n");
      out.write("\t geocoder.geocode( { 'address': faddr}, function(results, status) {\r\n");
      out.write("\r\n");
      out.write("\t  if (status == google.maps.GeocoderStatus.OK) {\r\n");
      out.write("\r\n");
      out.write("\t   var faddr_lat = results[0].geometry.location.lat(); //위도\r\n");
      out.write("\r\n");
      out.write("\t   var faddr_lng = results[0].geometry.location.lng(); //경도\r\n");
      out.write("\r\n");
      out.write("\t  } else {\r\n");
      out.write("\r\n");
      out.write("\t   var faddr_lat = \"\";\r\n");
      out.write("\r\n");
      out.write("\t   var faddr_lng = \"\";\r\n");
      out.write("\r\n");
      out.write("\t  }\r\n");
      out.write("\r\n");
      out.write("\t \t/*\r\n");
      out.write("\t  faddr_lat = faddr_lat * 1;\r\n");
      out.write("\t  faddr_lng = faddr_lng * 1;\r\n");
      out.write("\t  */\r\n");
      out.write("\t  \r\n");
      out.write("\t  var seoul = {\r\n");
      out.write("\t\t\t\tlat : faddr_lat,\r\n");
      out.write("\t\t\t\tlng : faddr_lng\r\n");
      out.write("\t\t\t}; \r\n");
      out.write("\t  \r\n");
      out.write("\t  \r\n");
      out.write("\t  var output = new google.maps.LatLng(parseFloat(seoul.faddr_lat),parseFloat(seoul.faddr_lng));\r\n");
      out.write("\t  \r\n");
      out.write("\r\n");
      out.write("\t\t//var output = \"(\" + faddr_lat + \", \" + faddr_lng + \")\";\r\n");
      out.write("\t\t//var output = {lat: faddr_lat, lng: faddr_lng};\r\n");
      out.write("\t\t//var output = { lat: faddr_lat, lng: faddr_lng};\r\n");
      out.write("\t\t\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t  //alert('주소 : ' + faddr + '\\n\\n위도 : ' + faddr_lat + '\\n\\n경도 : ' + faddr_lng);\r\n");
      out.write("\r\n");
      out.write("\t  \r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\taddMarker(output, map);\r\n");
      out.write("\t\t\r\n");
      out.write("\r\n");
      out.write("\t });\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction convert(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar addr = $(\"#pac-input\").val();\r\n");
      out.write("\t\tgeoCode(addr);\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write(" \r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"map\"></div>\r\n");
      out.write("\t<br />\r\n");
      out.write("\t<input id=\"pac-input\" class=\"controls\" type=\"text\"\r\n");
      out.write("\t\tplaceholder=\"Search Box\"> &nbsp;\r\n");
      out.write("\t<button onclick=\"convert()\">테스트</button>\r\n");
      out.write("\t<input type=\"button\" value=\" 마커추가 \" onclick=\"flag()\" />\r\n");
      out.write("\t<input type=\"button\" value=\" 출발 \" onclick=\"\" />\r\n");
      out.write("\t<input type=\"button\" value=\" 도착 \" onclick=\"\" />\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
