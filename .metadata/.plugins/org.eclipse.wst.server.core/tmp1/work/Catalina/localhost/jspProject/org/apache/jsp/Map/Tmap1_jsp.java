/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.39
 * Generated at: 2017-03-02 10:54:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Tmap1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<style>\r\n");
      out.write("#rightside {\r\n");
      out.write("\tposition: static;\r\n");
      out.write("\tborder: 1px solid;\r\n");
      out.write("\twidth: 300px;\r\n");
      out.write("\theight: 800px;\r\n");
      out.write("\tfloat: left;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"https://code.jquery.com/jquery-1.12.3.min.js\"></script>\r\n");
      out.write("<script language=\"javascript\"\r\n");
      out.write("\tsrc=\"https://apis.skplanetx.com/tmap/js?version=1&format=javascript&appKey=8119ac79-8052-3455-96b6-0595b08be4d7\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\tvar map, lonlat, zoom;\r\n");
      out.write("\tvar firstLonLat, secondLonLat;\r\n");
      out.write("\t\r\n");
      out.write("\tf = false;\r\n");
      out.write("\tfunction flag() {\r\n");
      out.write("\t\tf = !f;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t//벡터레이어 생성\r\n");
      out.write("\tvar vector_layer = new Tmap.Layer.Vector('Tmap Vector Layer');\r\n");
      out.write("\t//마커레이어 생성\r\n");
      out.write("\tvar markers = new Tmap.Layer.Markers( \"MarkerLayer\" );\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 초기 맵설정\r\n");
      out.write("\t\tfunction init() {\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t map = new Tmap.Map({div:'map_div', width:'800px', height:'800px'});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t lonlat = new Tmap.LonLat(126.9863748550415, 37.560806287625354);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t var pr_3857 = new Tmap.Projection(\"EPSG:3857\"); //EPSG3857 좌표계 객체\r\n");
      out.write("\t\t\t var pr_4326 = new Tmap.Projection(\"EPSG:4326\"); //EPSG4326 좌표계 객체\r\n");
      out.write("\t\t\t \r\n");
      out.write("\t\t\t lonlat.transform(pr_4326, pr_3857);\r\n");
      out.write("\t\t\t zoom = 14;\r\n");
      out.write("\t\t\t \r\n");
      out.write("\t\t\t map.setCenter(lonlat, zoom);          \r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t map.addLayer(markers);\r\n");
      out.write("\t\t\t  \r\n");
      out.write("\t\t\t var size = new Tmap.Size(24,38);\r\n");
      out.write("\t\t\t var offset = new Tmap.Pixel(-(size.w/2), -size.h);\r\n");
      out.write("\t\t\t var icon = new Tmap.Icon('https://developers.skplanetx.com/upload/tmap/marker/pin_b_m_a.png',size,offset);\r\n");
      out.write("\t\t\t var label = new Tmap.Label('<div>최초 시작지점</div>');\r\n");
      out.write("\t\t\t var marker = new Tmap.Markers(lonlat,icon,label);\r\n");
      out.write("\t\t\t/*  map.events.register(\"mouseup\", map, onClickMap); */\r\n");
      out.write("\t }  \r\n");
      out.write("\t\t\r\n");
      out.write("\twindow.onload = function(){\r\n");
      out.write("\t\tinit();\r\n");
      out.write("\t}\r\n");
      out.write("\t  \r\n");
      out.write("/* \t// 마커 추가\r\n");
      out.write(" \tfunction addMarker(lonlat){\r\n");
      out.write("\r\n");
      out.write("\t\t\tmap.addLayer(markers);\r\n");
      out.write("\t\t\tvar size = new Tmap.Size(24,38);\r\n");
      out.write("\t\t\tvar offset = new Tmap.Pixel(-(size.w/2), -size.h);\r\n");
      out.write("\t\t\tvar icon = new Tmap.Icon('https://developers.skplanetx.com/upload/tmap/marker/pin_b_m_a.png',size,offset);\r\n");
      out.write("//\t\t\tvar iconHtml = new Tmap.IconHtml('<div style=\"border:red solid 1px; background-color:#FF91DC;\">1</div>',size,offset);\r\n");
      out.write("\t\t\tvar label = new Tmap.Label('<div>'+document.inputForm.comment.value+'</div>');\r\n");
      out.write("\t\t\tvar marker = new Tmap.Markers(lonlat,icon,label);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tmarkers.addMarker(marker);\r\n");
      out.write(" \t\t\t\r\n");
      out.write("\t\t\t// 레이어 다시 위로 올리기\r\n");
      out.write("\t\t\tmap.removeLayer(markers);\r\n");
      out.write("\t\t\tmap.addLayers([vector_layer]);\r\n");
      out.write("\t\t\tmap.addLayers([markers]);\r\n");
      out.write("\t}  */\r\n");
      out.write("\r\n");
      out.write("\tfunction onOverMarker(evt) {\r\n");
      out.write("\t\tthis.popup.show();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction onMarkerOut(evt) {\r\n");
      out.write("\t\tthis.popup.hide();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// 지도 클릭해서 마커 추가\r\n");
      out.write("\tfunction onClickMap(e) {\r\n");
      out.write("\r\n");
      out.write("\t\tif(!f){\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tlonlat = map.getLonLatFromViewPortPx(e.xy);\r\n");
      out.write("\t\tlonlat = new Tmap.LonLat(lonlat.lon, lonlat.lat);\r\n");
      out.write("\t\tzoom = 14;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tloadGetAddressFromLonLat(lonlat);\r\n");
      out.write("\r\n");
      out.write("/* \t\tvar size = new Tmap.Size(24,38);\r\n");
      out.write("\t\tvar offset = new Tmap.Pixel(-(size.w/2), -size.h);\r\n");
      out.write("\t\tvar icon = new Tmap.Icon('https://developers.skplanetx.com/upload/tmap/marker/pin_b_m_a.png',size,offset);\r\n");
      out.write("\t\tvar label = new Tmap.Label(\"<div>\"+addr+\"</div>\");\r\n");
      out.write("\t\tvar marker = new Tmap.Markers(lonlat,icon,label);\r\n");
      out.write("\t\tmarker.events.register(\"mouseover\", marker, onOverMarker);\r\n");
      out.write("\t\tmarker.events.register(\"mouseout\", marker, onMarkerOut);\r\n");
      out.write("\t\tmarker.events.register(\"click\", marker, removeMarker);\r\n");
      out.write("\t\t \r\n");
      out.write("\t\tif (f) {\r\n");
      out.write("\t\t\tmarkers.addMarker(marker);\r\n");
      out.write("\t\t\tlineDrawing(lonlat);\r\n");
      out.write("\t\t\tf = !f;\r\n");
      out.write("\t\t}\t\r\n");
      out.write("\t\t// 레이어 다시 위로 올리기\r\n");
      out.write("\t\tmap.removeLayer(markers);\r\n");
      out.write("\t\tmap.addLayers([vector_layer]);\r\n");
      out.write("\t\tmap.addLayers([markers]); */\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 선 숨기기\r\n");
      out.write("\tfunction removeLine(){\r\n");
      out.write("\t\tmap.removeLayer(vector_layer);\r\n");
      out.write("\t}\r\n");
      out.write("\t//선 보이기\r\n");
      out.write("\tfunction drawLine(){\r\n");
      out.write("\t\tif(markers != null)\r\n");
      out.write("\t\t\tmap.removeLayer(markers);\r\n");
      out.write("\t\tmap.addLayers([vector_layer]);\r\n");
      out.write("\t\tmap.addLayers([markers]);\r\n");
      out.write("\t}\r\n");
      out.write("\t//선택 마커 삭제\r\n");
      out.write("\tfunction removeMarker(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar markerNum;\r\n");
      out.write("\t\tfor(var i=0; i<markers.markers.length; i++){\r\n");
      out.write("\t\t\tif(markers.markers[i] == this){\r\n");
      out.write("\t\t\t\tmarkerNum = i;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t$('#addinfo').children().eq(markerNum).remove();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tmarkers.removeMarker(markers.markers[markerNum]);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvector_layer.removeAllFeatures();\r\n");
      out.write(" \t\t\r\n");
      out.write("\t\tif(markerNum == 0 && markers.markers.length == 0) {\r\n");
      out.write(" \t\t\tsecondLonLat = null;\r\n");
      out.write(" \t\t}\r\n");
      out.write("\t\t\r\n");
      out.write(" \t\tif(markerNum >= markers.markers.length){\r\n");
      out.write(" \t\t\tsecondLonLat = markers.markers[markerNum-1].lonlat;\r\n");
      out.write(" \t\t} \r\n");
      out.write("\t\t\r\n");
      out.write(" \t\t\r\n");
      out.write(" \t\treLine();\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// 마커 추가할때 선 긋기\r\n");
      out.write("\tfunction lineDrawing(lonlat) {\r\n");
      out.write("\t\t\r\n");
      out.write("\t \tmap.addLayers([ vector_layer ]);\r\n");
      out.write("\t \tmap.addLayers([ markers ]);\r\n");
      out.write("\r\n");
      out.write("\t\tfirstLonLat = lonlat;\r\n");
      out.write(" \r\n");
      out.write("\t\t//polyline 좌표 배열.\r\n");
      out.write("\t\tvar pointList = [];\r\n");
      out.write("\r\n");
      out.write("\t\tif(secondLonLat != null)\r\n");
      out.write("\t\t\tpointList.push(new Tmap.Geometry.Point(secondLonLat.lon, secondLonLat.lat));\r\n");
      out.write("\t\tpointList.push(new Tmap.Geometry.Point(firstLonLat.lon, firstLonLat.lat));\r\n");
      out.write(" \r\n");
      out.write("\t\t//좌표 배열 객체화\r\n");
      out.write("\t\tvar lineString = new Tmap.Geometry.LineString(pointList);\r\n");
      out.write("\r\n");
      out.write("\t\t//polyline(Collection) 객체 정의\r\n");
      out.write("\t\tvar lineCollection = new Tmap.Geometry.Collection(lineString);\r\n");
      out.write("\r\n");
      out.write("\t\t//vector feature 객체화\r\n");
      out.write("\t\tvar style_bold = {strokeWidth: 5};\r\n");
      out.write("\t\tvar mLineFeature = new Tmap.Feature.Vector(lineCollection, null, style_bold);\r\n");
      out.write("\r\n");
      out.write("\t\t//벡터 레이어에 등록\r\n");
      out.write("\t\tvector_layer.addFeatures([ mLineFeature ]);\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tsecondLonLat = firstLonLat;\r\n");
      out.write("\t} \r\n");
      out.write("\t\r\n");
      out.write("\t// 삭제된 마커 제외 후 선긋기\r\n");
      out.write("\tfunction reLine(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tmap.addLayers([ vector_layer ]);\r\n");
      out.write("\t \tmap.addLayers([ markers ]);\r\n");
      out.write("\t \t\r\n");
      out.write("\t \tvar pointList = [];\r\n");
      out.write("\r\n");
      out.write("\t \tfor(var i=0; i<markers.markers.length; i++){\r\n");
      out.write("\t \t\tvar markerLonLat = markers.markers[i].lonlat;\r\n");
      out.write("\t \t\tpointList.push(new Tmap.Geometry.Point(markerLonLat.lon, markerLonLat.lat));\r\n");
      out.write("\t \t}\r\n");
      out.write("\t \t\r\n");
      out.write("\r\n");
      out.write("\t\tvar lineString = new Tmap.Geometry.LineString(pointList);\r\n");
      out.write("\r\n");
      out.write("\t\tvar lineCollection = new Tmap.Geometry.Collection(lineString);\r\n");
      out.write("\r\n");
      out.write("\t\tvar style_bold = {strokeWidth: 5};\r\n");
      out.write("\t\tvar mLineFeature = new Tmap.Feature.Vector(lineCollection, null, style_bold);\r\n");
      out.write("\r\n");
      out.write("\t\tvector_layer.addFeatures([ mLineFeature ]);\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction loadGetAddressFromLonLat(ll){\r\n");
      out.write("\t    var tdata = new Tmap.TData();\r\n");
      out.write("\t    tdata.events.register(\"onComplete\", tdata, onCompleteLoadGetAddressFromLonLat);\r\n");
      out.write("\t    var optionObj = {version:1};\r\n");
      out.write("\t    tdata.getAddressFromLonLat(ll, optionObj);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tvar number;\r\n");
      out.write("\t// 마커에 맞는 주소 레이블에 등록\r\n");
      out.write("\tfunction onCompleteLoadGetAddressFromLonLat(){\r\n");
      out.write("\t    \r\n");
      out.write("\t\tvar info;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar addr = $(this.responseXML).find(\"fullAddress\").text();\r\n");
      out.write("\t    \r\n");
      out.write("\t\tvar size = new Tmap.Size(24,38);\r\n");
      out.write("\t\tvar offset = new Tmap.Pixel(-(size.w/2), -size.h);\r\n");
      out.write("\t\tvar icon = new Tmap.Icon('https://developers.skplanetx.com/upload/tmap/marker/pin_b_m_a.png',size,offset);\r\n");
      out.write("\t\tvar label = new Tmap.Label(\"<div>\"+addr+\"</div>\");\r\n");
      out.write("\t\tvar marker = new Tmap.Markers(lonlat,icon,label);\r\n");
      out.write("\t\tmarker.events.register(\"mouseover\", marker, onOverMarker);\r\n");
      out.write("\t\tmarker.events.register(\"mouseout\", marker, onMarkerOut);\r\n");
      out.write("\t\tmarker.events.register(\"click\", marker, removeMarker);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif (f) {\r\n");
      out.write("\t\t\tmarkers.addMarker(marker);\r\n");
      out.write("\t\t\tlineDrawing(lonlat);\r\n");
      out.write("\t\t\t$('#addinfo').append('<div>'+addr+'<br/>--------------------------------------------</div>');\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tf = !f;\r\n");
      out.write("\t\t}\t\r\n");
      out.write("\t\t// 레이어 다시 위로 올리기\r\n");
      out.write("\t\tmap.removeLayer(markers);\r\n");
      out.write("\t\tmap.addLayers([vector_layer]);\r\n");
      out.write("\t\tmap.addLayers([markers]);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction dragStart(event){\r\n");
      out.write("\t\tevent.dataTransfer.effectAllowed='move';\r\n");
      out.write("\t\tevent.dataTransfer.setData(\"Text\", event.target.getAttribute('id'));\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction dragEnter(event) {\r\n");
      out.write("\t\tvar idelt = event.dataTransfer.getData(\"Text\");\r\n");
      out.write("\t    return true;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction dragOver(event) {\r\n");
      out.write("\t    var idelt = event.dataTransfer.getData(\"Text\");\r\n");
      out.write("\t    var id = event.target.getAttribute('id');\r\n");
      out.write("\t    if(id == 'div_map' && idelt == drag){\r\n");
      out.write("\t    \treturn true;\r\n");
      out.write("\t    }\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction dragDrop(event) {\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction dragEnd(event){\r\n");
      out.write("\t\tf=!f;\r\n");
      out.write("\t\tif(f){\r\n");
      out.write("\t\t\tmap.events.register(\"mouseover\", map, onClickMap);\r\n");
      out.write("\t\t\tevent.dataTransfer.clearData(\"Text\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<form name=\"inputForm\">\r\n");
      out.write("\t\t<div id=\"map_div\" style=\"float: left\"\r\n");
      out.write("\t\t\tondragenter=\"return dragEnter(event)\" ondrop=\"return dragDrop(event)\"\r\n");
      out.write("\t\t\tondragover=\"return dragOver(event)\"></div>\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- \t<input type=\"button\" onclick=\"flag()\" value = \"marker\"></input> -->\r\n");
      out.write("\t\t<div id=\"rightside\">\r\n");
      out.write("\t\t\t&nbsp;\r\n");
      out.write("\t\t\t<h3>Timeline</h3>\r\n");
      out.write("\t\t\t-------------------------------------------- &nbsp;\r\n");
      out.write("\t\t\t<div id=\"drag\" draggable=\"true\" ondragstart=\"return dragStart(event)\"\r\n");
      out.write("\t\t\t\tondragend=\"return dragEnd(event)\">\r\n");
      out.write("\t\t\t\t<img\r\n");
      out.write("\t\t\t\t\tsrc=\"https://developers.skplanetx.com/upload/tmap/marker/pin_b_m_a.png\" />마커표시\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t--------------------------------------------\r\n");
      out.write("\t\t\t<div id=\"addinfo\"></div>\r\n");
      out.write("\t\t\t<div>\r\n");
      out.write("\t\t\t\t<input type=\"button\" value=\" 선 숨기기 \" onclick=\"removeLine()\" />\r\n");
      out.write("\t\t\t\t&nbsp; <input type=\"button\" value=\" 선 보이기 \" onclick=\"drawLine()\" />\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
