/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.39
 * Generated at: 2017-02-24 08:04:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class google3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<style>\r\n");
      out.write("html, body {\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("\tmargin: 0;\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#map {\r\n");
      out.write("\theight: 500px;\r\n");
      out.write("\twidth: 500px;\r\n");
      out.write("}\r\n");
      out.write("#address{\r\n");
      out.write("\tposition : absolute;\r\n");
      out.write("\tmargin-left: 550px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".controls {\r\n");
      out.write("\tmargin-top: 10px;\r\n");
      out.write("\tborder: 1px solid transparent;\r\n");
      out.write("\tborder-radius: 2px 0 0 2px;\r\n");
      out.write("\tbox-sizing: border-box;\r\n");
      out.write("\t-moz-box-sizing: border-box;\r\n");
      out.write("\theight: 32px;\r\n");
      out.write("\toutline: none;\r\n");
      out.write("\tbox-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\r\n");
      out.write("\tbackground-color: #fff;\r\n");
      out.write("\tfont-family: Roboto;\r\n");
      out.write("\tfont-size: 15px;\r\n");
      out.write("\tfont-weight: 300;\r\n");
      out.write("\tmargin-left: 12px;\r\n");
      out.write("\tpadding: 0 11px 0 13px;\r\n");
      out.write("\ttext-overflow: ellipsis;\r\n");
      out.write("\twidth: 300px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#type-selector label {\r\n");
      out.write("\tfont-family: Roboto;\r\n");
      out.write("\tfont-size: 13px;\r\n");
      out.write("\tfont-weight: 300;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<title>Places Searchbox</title>\r\n");
      out.write("</head>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tfunction initAutocomplete() {\r\n");
      out.write("\t\t\tvar map = new google.maps.Map(document.getElementById('map'), {\r\n");
      out.write("\t\t\t\tcenter : {\r\n");
      out.write("\t\t\t\t\tlat : -33.8688,\r\n");
      out.write("\t\t\t\t\tlng : 151.2195\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tzoom : 13,\r\n");
      out.write("\t\t\t\tmapTypeId : google.maps.MapTypeId.ROADMAP\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t// Create the search box and link it to the UI element.\r\n");
      out.write("\t\t\tvar input = document.getElementById('pac-input');\r\n");
      out.write("\t\t\tvar searchBox = new google.maps.places.SearchBox(input);//\r\n");
      out.write("\r\n");
      out.write("\t\t\t// Bias the SearchBox results towards current map's viewport.\r\n");
      out.write("\t\t\tmap.addListener('bounds_changed', function() {\r\n");
      out.write("\t\t\t\tsearchBox.setBounds(map.getBounds());\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar markers = [];\r\n");
      out.write("\t\t\t// [START region_getplaces]\r\n");
      out.write("\t\t\t// Listen for the event fired when the user selects a prediction and retrieve\r\n");
      out.write("\t\t\t// more details for that place.\r\n");
      out.write("\t\t\tsearchBox.addListener('places_changed', function() {\r\n");
      out.write("\t\t\t\tvar places = searchBox.getPlaces();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif (places.length == 0) {\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t// Clear out the old markers.\r\n");
      out.write("\t\t\t\tmarkers.forEach(function(marker) {\r\n");
      out.write("\t\t\t\t\tmarker.setMap(null);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tmarkers = [];\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t// For each place, get the icon, name and location.\r\n");
      out.write("\t\t\t\tvar bounds = new google.maps.LatLngBounds();\r\n");
      out.write("\t\t\t\tplaces.forEach(function(place) {\r\n");
      out.write("\t\t\t\t\tvar icon = {\r\n");
      out.write("\t\t\t\t\t\turl : place.icon,\r\n");
      out.write("\t\t\t\t\t\tsize : new google.maps.Size(71, 71),\r\n");
      out.write("\t\t\t\t\t\torigin : new google.maps.Point(0, 0),\r\n");
      out.write("\t\t\t\t\t\tanchor : new google.maps.Point(17, 34),\r\n");
      out.write("\t\t\t\t\t\tscaledSize : new google.maps.Size(25, 25)\r\n");
      out.write("\t\t\t\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t// Create a marker for each place.\r\n");
      out.write("\t\t\t\t\tmarkers.push(new google.maps.Marker({\r\n");
      out.write("\t\t\t\t\t\tmap : map,\r\n");
      out.write("\t\t\t\t\t\ticon : icon,\r\n");
      out.write("\t\t\t\t\t\ttitle : place.name,\r\n");
      out.write("\t\t\t\t\t\tposition : place.geometry.location\r\n");
      out.write("\t\t\t\t\t}));\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (place.geometry.viewport) {\r\n");
      out.write("\t\t\t\t\t\t// Only geocodes have viewport.\r\n");
      out.write("\t\t\t\t\t\tbounds.union(place.geometry.viewport);\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tbounds.extend(place.geometry.location);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tmap.fitBounds(bounds);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\t<script\r\n");
      out.write("\t\tsrc=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAF05JCFoefu9jROxjM8TcHc8GIR6YDhuU&libraries=places&callback=initAutocomplete\"\r\n");
      out.write("\t\tasync defer></script>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"map\"></div>\r\n");
      out.write("\t<br />\r\n");
      out.write("\t<div id=\"address\"><input id=\"pac-input\" class=\"controls\" type=\"text\"\r\n");
      out.write("\t\tplaceholder=\"Search Box\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
