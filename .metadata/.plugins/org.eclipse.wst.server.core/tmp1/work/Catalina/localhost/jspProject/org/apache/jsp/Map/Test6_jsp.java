/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.39
 * Generated at: 2017-02-27 07:07:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Test6_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<script language=\"javascript\"\r\n");
      out.write("\tsrc=\"https://apis.skplanetx.com/tmap/js?version=1&format=javascript&appKey=bac4f916-3297-3be4-93ff-e37ae88b8f42\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar map, markers, lonlat, zoom, index;\r\n");
      out.write("\tvar firstLonLat, secondLonLat;\r\n");
      out.write("\r\n");
      out.write("\t// 초기 맵설정\r\n");
      out.write("\tfunction init() {\r\n");
      out.write("\r\n");
      out.write("\t\tmap = new Tmap.Map({\r\n");
      out.write("\t\t\tdiv : 'map_div',\r\n");
      out.write("\t\t\twidth : '500px',\r\n");
      out.write("\t\t\theight : '300px'\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tlonlat = new Tmap.LonLat(126.9863748550415, 37.560806287625354);\r\n");
      out.write("\r\n");
      out.write("\t\tvar pr_3857 = new Tmap.Projection(\"EPSG:3857\"); //EPSG3857 좌표계 객체\r\n");
      out.write("\t\tvar pr_4326 = new Tmap.Projection(\"EPSG:4326\"); //EPSG4326 좌표계 객체\r\n");
      out.write("\r\n");
      out.write("\t\tlonlat.transform(pr_4326, pr_3857);\r\n");
      out.write("\t\tzoom = 14;\r\n");
      out.write("\r\n");
      out.write("\t\tmap.setCenter(lonlat, zoom);\r\n");
      out.write("\r\n");
      out.write("\t\tmarkers = new Tmap.Layer.Markers(\"MarkerLayer\");\r\n");
      out.write("\t\tmap.addLayer(markers);\r\n");
      out.write("\r\n");
      out.write("\t\tvar size = new Tmap.Size(24, 38);\r\n");
      out.write("\t\tvar offset = new Tmap.Pixel(-(size.w / 2), -size.h);\r\n");
      out.write("\t\tvar icon = new Tmap.Icon(\r\n");
      out.write("\t\t\t\t'https://developers.skplanetx.com/upload/tmap/marker/pin_b_m_a.png',\r\n");
      out.write("\t\t\t\tsize, offset);\r\n");
      out.write("\t\tvar label = new Tmap.Label('<div>최초 시작지점</div>');\r\n");
      out.write("\t\tvar marker = new Tmap.Markers(lonlat, icon, label);\r\n");
      out.write("\t\tmarker.events.register(\"mouseover\", marker, onOverMarker);\r\n");
      out.write("\t\tmarker.events.register(\"mouseout\", marker, onMarkerOut);\r\n");
      out.write("\t\tmap.events.register(\"click\", map, onClickMap);\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\twindow.onload = function() {\r\n");
      out.write("\t\tinit();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// 마커 추가\r\n");
      out.write("\tfunction addMarker() {\r\n");
      out.write("\r\n");
      out.write("\t\tvar form = document.inputForm;\r\n");
      out.write("\t\tvar lon = form.lon.value;\r\n");
      out.write("\t\tvar lat = form.lat.value;\r\n");
      out.write("\r\n");
      out.write("\t\tlonlat = new Tmap.LonLat(lon, lat);\r\n");
      out.write("\r\n");
      out.write("\t\tvar pr_3857 = new Tmap.Projection(\"EPSG:3857\"); //EPSG3857 좌표계 객체\r\n");
      out.write("\t\tvar pr_4326 = new Tmap.Projection(\"EPSG:4326\"); //EPSG4326 좌표계 객체\r\n");
      out.write("\r\n");
      out.write("\t\tlonlat.transform(pr_4326, pr_3857);\r\n");
      out.write("\t\tzoom = 14;\r\n");
      out.write("\r\n");
      out.write("\t\tmap.setCenter(lonlat, zoom);\r\n");
      out.write("\t\tmarkers = new Tmap.Layer.Markers(\"MarkerLayer\");\r\n");
      out.write("\t\tmap.addLayer(markers);\r\n");
      out.write("\t\tvar size = new Tmap.Size(24, 38);\r\n");
      out.write("\t\tvar offset = new Tmap.Pixel(-(size.w / 2), -size.h);\r\n");
      out.write("\t\t//\t\t\tvar icon = new Tmap.Icon('https://developers.skplanetx.com/upload/tmap/marker/pin_b_m_a.png',size,offset);\r\n");
      out.write("\t\tvar iconHtml = new Tmap.IconHtml(\r\n");
      out.write("\t\t\t\t'<div style=\"border:red solid 1px; background-color:#FF91DC;\">1</div>',\r\n");
      out.write("\t\t\t\tsize, offset);\r\n");
      out.write("\t\tvar label = new Tmap.Label('<div>' + document.inputForm.comment.value\r\n");
      out.write("\t\t\t\t+ '</div>');\r\n");
      out.write("\t\tvar marker = new Tmap.Markers(lonlat, iconHtml, label);\r\n");
      out.write("\t\tmarkers.addMarker(marker);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction onOverMarker(evt) {\r\n");
      out.write("\t\tthis.popup.show();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction onMarkerOut(evt) {\r\n");
      out.write("\t\tthis.popup.hide();\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// 지도 클릭해서 마커 추가\r\n");
      out.write("\tfunction onClickMap(e) {\r\n");
      out.write("\r\n");
      out.write("\t\tlonlat = map.getLonLatFromViewPortPx(e.xy);\r\n");
      out.write("\r\n");
      out.write("\t\tlonlat = new Tmap.LonLat(lonlat.lon, lonlat.lat);\r\n");
      out.write("\r\n");
      out.write("\t\tzoom = 14;\r\n");
      out.write("\r\n");
      out.write("\t\tmap.setCenter(lonlat, zoom);\r\n");
      out.write("\t\tmarkers = new Tmap.Layer.Markers(\"MarkerLayer\");\r\n");
      out.write("\t\tmap.addLayer(markers);\r\n");
      out.write("\t\tvar size = new Tmap.Size(24, 38);\r\n");
      out.write("\t\tvar offset = new Tmap.Pixel(-(size.w / 2), -size.h);\r\n");
      out.write("\t\tvar icon = new Tmap.Icon(\r\n");
      out.write("\t\t\t\t'https://developers.skplanetx.com/upload/tmap/marker/pin_b_m_a.png',\r\n");
      out.write("\t\t\t\tsize, offset);\r\n");
      out.write("\t\tvar label = new Tmap.Label('<div>' + document.inputForm.comment.value\r\n");
      out.write("\t\t\t\t+ '</div>');\r\n");
      out.write("\t\tvar marker = new Tmap.Markers(lonlat, icon, label);\r\n");
      out.write("\t\tmarker.events.register(\"mouseover\", marker, onOverMarker);\r\n");
      out.write("\t\tmarker.events.register(\"mouseout\", marker, onMarkerOut);\r\n");
      out.write("\t\tmarkers.addMarker(marker);\r\n");
      out.write("\r\n");
      out.write("\t\tlineDrawing(lonlat);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction lineDrawing(lonlat) {\r\n");
      out.write("\r\n");
      out.write("\t\t//벡터레이어 생성\r\n");
      out.write("\t\tvar vector_layer = new Tmap.Layer.Vector('Tmap Vector Layer');\r\n");
      out.write("\t\tmap.addLayers([ vector_layer ]);\r\n");
      out.write("\r\n");
      out.write("\t\tfirstLonLat = lonlat;\r\n");
      out.write("\r\n");
      out.write("\t\t//polyline 좌표 배열.\r\n");
      out.write("\t\tvar pointList = [];\r\n");
      out.write("\r\n");
      out.write("\t\tif (secondLonLat != null)\r\n");
      out.write("\t\t\tpointList.push(new Tmap.Geometry.Point(secondLonLat.lon,\r\n");
      out.write("\t\t\t\t\tsecondLonLat.lat));\r\n");
      out.write("\t\tpointList\r\n");
      out.write("\t\t\t\t.push(new Tmap.Geometry.Point(firstLonLat.lon, firstLonLat.lat));\r\n");
      out.write("\r\n");
      out.write("\t\t//좌표 배열 객체화\r\n");
      out.write("\t\tvar lineString = new Tmap.Geometry.LineString(pointList);\r\n");
      out.write("\r\n");
      out.write("\t\t//polyline(Collection) 객체 정의\r\n");
      out.write("\t\tvar style_bold = {\r\n");
      out.write("\t\t\tstrokeWidth : 5\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tvar lineCollection = new Tmap.Geometry.Collection(lineString);\r\n");
      out.write("\r\n");
      out.write("\t\t//vector feature 객체화\r\n");
      out.write("\t\tvar mLineFeature = new Tmap.Feature.Vector(lineCollection, null,\r\n");
      out.write("\t\t\t\tstyle_bold);\r\n");
      out.write("\r\n");
      out.write("\t\t//벡터 레이어에 등록\r\n");
      out.write("\t\tvector_layer.addFeatures([ mLineFeature ]);\r\n");
      out.write("\t\t;\r\n");
      out.write("\r\n");
      out.write("\t\tsecondLonLat = firstLonLat;\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<form name=\"inputForm\">\r\n");
      out.write("\t\t<div id=\"map_div\"></div>\r\n");
      out.write("\t\t<br /> 위도 : <input type=\"text\" name=\"lon\" /><br /> 경도 : <input\r\n");
      out.write("\t\t\ttype=\"text\" name=\"lat\" /><br /> 코멘트 : <input type=\"text\"\r\n");
      out.write("\t\t\tname=\"comment\" /><br /> <input type=\"button\" value=\" 마커추가 \"\r\n");
      out.write("\t\t\tonclick=\"addMarker()\" />\r\n");
      out.write("\t</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
